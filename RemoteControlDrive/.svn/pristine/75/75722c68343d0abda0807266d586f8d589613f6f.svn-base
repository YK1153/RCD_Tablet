using AtrptShare;
using RcdCmn;
using RcdOperationSystemConst;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace RcdOperation.Control
{
    /// <summary>
    /// 安全監視の機能を記載する
    /// </summary>
    public partial class ControlMain
    {
        Timer m_timer_detect;
        Timer m_timer_comparison;

        //※
        private const string C_NM_SAFETYMONITORING = "[SaMo]";
        private readonly bool C_ALRET_MODE = bool.Parse(ConfigurationManager.AppSettings["C_ALRET_MODE"]);
        //

        private CommDetect m_detectCl;

        //# 人物検知 #
        /// <summary>
        /// 送信カメラ数
        /// </summary>
        private int m_SndCamNum = OperationConst.C_DETECT_SEND_CAM_NUM;
        private List<ObjectLabel> m_labelList = new List<ObjectLabel>();
        private List<InstrusionDetection> m_ObjectDatas = new List<InstrusionDetection>();
        private string m_carLabel;
        private int m_nowidx = -1;
        private double m_slowfrontdistance;
        private double m_slowbackdistance;
        private double m_pausefrontdistance;
        private double m_pausebackdistance;
        private double m_stopfrontdistance;
        private double m_stopbackdistance;
        private int m_slowfrontidx;
        private int m_slowbackidx;
        private int m_pausefrontidx;
        private int m_pausebackidx;
        private int m_stopfrontidx;
        private int m_stopbackidx;

        private int m_pause_detect_flg = 0;
        //##

        //# ローカライズ比較 # 
        List<CamDeviation> m_deviations = new List<CamDeviation>();
        /// <summary>
        /// ローカライズ不一致カウント
        /// </summary>
        private int m_cnt;
        //##


        #region ### 安全監視初期処理 ###
        public void InitializeSafetyMonitoring()
        {
            //※設定値の取得
            //      
            ReadFile("xml/LabelList.xml", ref m_labelList);
            ReadFile("xml/CamDeviation.xml", ref m_deviations);
            //
            m_detectCl = new CommDetect(m_connectionConst);

            // 制御車両のラベルを取得
            m_carLabel = m_labelList.SingleOrDefault(list => list.CarFlag == true).Label;
        }
        #endregion

        #region ### カメラ番号変更イベント検知 ###
        private void SafetyMonitoringCamNoChange(AnalyzerCamNoChangedEventArgs e)
        {
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} Start");

            // メイン測位であれば
            // 測位中のカメラの一つ前からm_SndCamNum個分のカメラ番号をリストで送付する
            // カメラリストより現在のカメラ番号のインデックス番号を取得し、その１つ前からm_SndCamNum個分を対象とする ※要変更
            if (MainCamType == e.camtype)
            {
                // 測位中カメラ番号のインデックス番号を取得
                int index = m_camList.FindIndex(list => list.CamID == e.camid);

                // ※
                index = index == -1 ? 0 : index;
                // ※

                // インデックスを-1して1つ前のインデックス番号とする
                index += -1;

                // 送信するカメラ番号のリスト更新
                List<int> vs = new List<int>();
                for (int i = 0; i < m_SndCamNum; i++)
                {
                    if (index + i != -1 && m_camList.Count > index + i)
                    {
                        vs.Add(int.Parse(m_camList[index + i].CamID));
                    }
                }
                m_detectCl.ChangeSndCamNum(vs);
            }
            else
            {
                LOGGER.Debug("CamType is different");
            }

            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} end");
        }
        #endregion

        #region ### 処理開始・終了 ###

        // 安全監視タイマー開始
        private void StartSafetyMonitortringTimer()
        {
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} Start");

            SafetyMonitoringInitialize();

            m_detectCl.SndTimerStart();

            m_timer_detect = new Timer(new TimerCallback(Callback_DetectJudge), null, Timeout.Infinite, Timeout.Infinite);
            m_timer_detect.Change(0, OperationConst.C_SYSTEM_INTERVAL);

            //m_timer_comparison = new Timer(new TimerCallback(Callback_ComparisonPosition), null, Timeout.Infinite, 0);
            //m_timer_comparison.Change(0, OperationConst.C_SYSTEM_INTERVAL);

            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} End");
        }

        //  安全監視タイマー終了
        private void StopSafetyMonitortringTimer()
        {
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} Start");

            m_detectCl.SndTimerStop();

            if (m_timer_detect != null)
            {
                m_timer_detect.Dispose();
                m_timer_detect = null;
            }
            if (m_timer_comparison != null)
            {
                m_timer_comparison.Dispose();
                m_timer_comparison = null;
            }
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} End");
        }

        #endregion

        #region ### 安全監視初期化 ###
        private void SafetyMonitoringInitialize()
        {
            m_cnt = 0;
        }
        #endregion

        #region ### 侵入検知判定 ###
        // 侵入検知判定
        private void Callback_DetectJudge(object state)
        {
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} Start");

            try
            {
                // タイマー停止
                if (m_timer_detect != null) m_timer_detect.Change(Timeout.Infinite, Timeout.Infinite);


                // 走行エリア内包位置確認
                // 走行エリア画変更されたら各値の変更
                if (m_nowidx != m_contain_idx)
                {
                    // リア軸中心が属するエリアの取得
                    m_nowidx = m_contain_idx;
                    SpeedArea sa = m_SpeedAreas[m_nowidx];
                    // エリア設定より前後判定距離の取得
                    m_slowfrontdistance = double.Parse(sa.SlowFrontDistance != null && sa.SlowFrontDistance != "" ? sa.SlowFrontDistance : m_ConfigData.SlowFrontDistance);
                    m_slowbackdistance = double.Parse(sa.SlowBackDistance != null && sa.SlowBackDistance != "" ? sa.SlowBackDistance : m_ConfigData.SlowBackDistance);
                    m_pausefrontdistance = double.Parse(sa.PauseFrontDistance != null && sa.PauseFrontDistance != "" ? sa.PauseFrontDistance : m_ConfigData.PauseFrontDistance);
                    m_pausebackdistance = double.Parse(sa.PauseBackDistance != null && sa.PauseBackDistance != "" ? sa.PauseBackDistance : m_ConfigData.PauseBackDistance);
                    m_stopfrontdistance = double.Parse(sa.StopFrontDistance != null && sa.StopFrontDistance != "" ? sa.StopFrontDistance : m_ConfigData.StopFrontDistance);
                    m_stopbackdistance = double.Parse(sa.StopBackDistance != null && sa.StopBackDistance != "" ? sa.StopBackDistance : m_ConfigData.StopBackDistance);
                    // 距離より前後エリア数の計算
                    m_slowfrontidx = CalcFrontIndex(m_nowidx, m_slowfrontdistance);
                    m_slowbackidx = CalcBackIndex(m_nowidx, m_slowbackdistance);
                    m_pausefrontidx = CalcFrontIndex(m_nowidx, m_pausefrontdistance);
                    m_pausebackidx = CalcBackIndex(m_nowidx, m_pausebackdistance);
                    m_stopfrontidx = CalcFrontIndex(m_nowidx, m_stopfrontdistance);
                    m_stopbackidx = CalcBackIndex(m_nowidx, m_stopbackdistance);
                }
                LOGGER.Debug($"{C_NM_SAFETYMONITORING}確認範囲,slow:{m_slowfrontidx}=>{m_slowbackidx},pause:{m_pausefrontidx}=>{m_pausebackidx},stop:{m_stopfrontidx}=>{m_stopbackidx}");


                // 制御指示計算実行後実施
                if (m_calcstarted == OperationConst.C_RECEIVED && m_detectCl.RcvStatus)
                {
                    // 認識情報取得
                    List<CommDetect.RecognitionObjectData> recdatas = m_detectCl.DetectObjectList;

                    //認識情報を詰め替え
                    List<InstrusionDetection> objectDatas = new List<InstrusionDetection>();
                    foreach (CommDetect.RecognitionObjectData detectdate in recdatas)
                    {
                        objectDatas.Add(new InstrusionDetection()
                        {
                            objectData = (CommDetect.RecognitionObjectData)detectdate.Clone()
                        });
                    }

                    // 計算後車両位置を取得し、左後端へ変換
                    PointF rearCenter = new PointF((float)(m_avpappOutputData.control_point.x), (float)(m_avpappOutputData.control_point.y));
                    double carYawrate = m_avpappOutputData.draw_info.yawrate;
                    double LLCY = m_carSpec.CenterEndLength * Math.Cos(carYawrate);
                    double LLSY = m_carSpec.CenterEndLength * Math.Sin(carYawrate);
                    double TCY = (m_carSpec.WidthDistance / 2) * Math.Cos(carYawrate);
                    double TSY = (m_carSpec.WidthDistance / 2) * Math.Sin(carYawrate);
                    PointF controlcarpoint = new PointF();
                    controlcarpoint.X = (float)(rearCenter.X - LLCY - TSY);
                    controlcarpoint.Y = (float)(rearCenter.Y - LLSY + TCY);
                    LOGGER.Debug($"{C_NM_SAFETYMONITORING}制御車両：{controlcarpoint.X},{controlcarpoint.Y}");

                    // 制御車両判定 ＋ 侵入物半径設定（物標領域算出）
                    foreach (InstrusionDetection objects in objectDatas)
                    {
                        // 値整理
                        objects.Position = new PointF(objects.objectData.pos[0] * 0.001f, objects.objectData.pos[1] * 0.001f);

                        // 車両であれば制御車両かどうか判定、制御車両であれば判定対象から外す
                        if (m_carLabel == objects.objectData.label)
                        {
                            // 制御位置左後端と侵入車両位置との距離を算出
                            double dist = Math.Sqrt(Math.Pow(controlcarpoint.X - objects.Position.X, 2) + Math.Pow(controlcarpoint.Y - objects.Position.Y, 2));

                            if (dist <= C_CONTROLCARRADIUS)
                            {
                                objects.JudgesTarget = false;
                                LOGGER.Debug($"{C_NM_SAFETYMONITORING}制御車両:{objects.Position.X},{objects.Position.Y}");
                            }
                        }

                        // 物標領域の半径を取得
                        objects.Radius = GetRadius(objects.objectData.label, objects.Position);
                    }

                    // 表示用値格納
                    lock (m_ObjectDatas)
                    {
                        m_ObjectDatas.Clear();
                        foreach (InstrusionDetection objects in objectDatas)
                        {
                            m_ObjectDatas.Add((InstrusionDetection)objects.Clone()); ;
                        }
                    }

                    // 認識物がエリアに侵入しているか判定
                    bool slow_contain = false;
                    bool pause_contain = false;
                    bool stop_contain = false;

                    // 認識物衝突判定 減速エリア
                    foreach (InstrusionDetection objects in objectDatas)
                    {
                        if (!objects.JudgesTarget) { continue; }

                        // 減速エリアに含まれているか判定
                        // 1つでも含まれていたら、減速エリアの確認を終了する
                        for (int i = m_slowbackidx; i < m_slowfrontidx; i++)
                        {
                            PointF[] slowarea = Viewer.m_SpeedAreas.ElementAt(i).Value.SlowArea;
                            bool slow = CommonProc.ElipseInPolygon(objects.Position, objects.Radius, slowarea);

                            if (slow)
                            {
                                LOGGER.Debug($"{C_NM_SAFETYMONITORING}減速エリア侵入:{objects.objectData.label}：{objects.Position.X},{objects.Position.Y}：{objects.Radius}：{Viewer.m_SpeedAreas.ElementAt(i).Value.ID}");
                                foreach (PointF p in slowarea)
                                {
                                    LOGGER.Debug($"{C_NM_SAFETYMONITORING}slowarea:{p.X},{p.Y}");
                                }
                                slow_contain = slow;
                                objects.JudgesTarget = true;
                                break;
                            }
                        }
                        if (slow_contain) { break; }
                        else { objects.JudgesTarget = false; }
                    }

                    // 減速エリアに含まれている場合
                    if (slow_contain)
                    {
                        // 認識物衝突判定　一時停止エリア
                        foreach (InstrusionDetection objects in objectDatas)
                        {
                            if (!objects.JudgesTarget) { continue; }

                            // 一時停止エリアに含まれているか判定
                            // 1つでも含まれていたら、一時停止エリアの確認を終了する
                            for (int i = m_pausebackidx; i < m_pausefrontidx; i++)
                            {
                                PointF[] pausearea = Viewer.m_SpeedAreas.ElementAt(i).Value.PauseArea;
                                bool pause = CommonProc.ElipseInPolygon(objects.Position, objects.Radius, pausearea);

                                if (pause)
                                {
                                    LOGGER.Debug($"{C_NM_SAFETYMONITORING}一時停止エリア侵入:{objects.objectData.label}：{objects.Position.X},{objects.Position.Y}：{objects.Radius}：{Viewer.m_SpeedAreas.ElementAt(i).Value.ID}");
                                    foreach (PointF p in pausearea)
                                    {
                                        LOGGER.Debug($"{C_NM_SAFETYMONITORING}pausearea:{p.X},{p.Y}");
                                    }
                                    pause_contain = pause;
                                    break;
                                }
                            }
                            if (pause_contain) { break; }
                            else { objects.JudgesTarget = false; }
                        }
                    }


                    // 一時停止エリアに含まれている場合
                    if (pause_contain)
                    {
                        // 認識物衝突判定　走行停止エリア
                        foreach (InstrusionDetection objects in objectDatas)
                        {
                            if (!objects.JudgesTarget) { continue; }

                            // 走行停止エリアに含まれているか判定
                            // 1つでも含まれていたら、走行停止エリアの確認を終了する
                            for (int i = m_stopbackidx; i < m_stopfrontidx; i++)
                            {
                                PointF[] stoparea = Viewer.m_SpeedAreas.ElementAt(i).Value.StopArea;
                                bool stop = CommonProc.ElipseInPolygon(objects.Position, objects.Radius, stoparea);

                                if (stop)
                                {
                                    LOGGER.Debug($"{C_NM_SAFETYMONITORING}走行停止エリア侵入:{objects.objectData.label}：{objects.Position.X},{objects.Position.Y}：{objects.Radius}：{Viewer.m_SpeedAreas.ElementAt(i).Value.ID}");
                                    foreach (PointF p in stoparea)
                                    {
                                        LOGGER.Debug($"{C_NM_SAFETYMONITORING}stoparea:{p.X},{p.Y}");
                                    }
                                    stop_contain = stop;
                                    objects.JudgesTarget = true;
                                    break;
                                }
                            }
                            if (stop_contain) { break; }
                            else { objects.JudgesTarget = false; }
                        }
                    }


                    // 判定範囲内のいづれかのエリアに含まれている場合
                    if (slow_contain || pause_contain || stop_contain)
                    {
                        // 走行停止エリアに含まれている場合
                        if (stop_contain)
                        {
                            // 車両が動いていたら走行停止
                            if (m_vehicleData.is_vehicle_stop != true)
                            {
                                LOGGER.Info($"{C_NM_SAFETYMONITORING}走行停止エリア侵入→車両進行中のため走行停止");
                                // 走行停止
                                if (C_ALRET_MODE) Task.Run(() => EmergencyEndProcess(Res.ErrorStatus.DETECT_AREA_ERR.Code));
                            }
                            // 車両が止まっていたら一時停止
                            else
                            {
                                LOGGER.Info($"{C_NM_SAFETYMONITORING}走行停止エリア侵入→車両進行中のため一時停止");
                                // 一時停止
                                if (C_ALRET_MODE) m_pause_detect_flg = OperationConst.C_ABNORMAL;
                            }
                        }

                        // 走行停止エリアに含まれておらず、一時停止エリアに含まれている場合
                        if (!stop_contain && pause_contain)
                        {
                            LOGGER.Info($"{C_NM_SAFETYMONITORING}一時停止エリア侵入→一時停止");
                            // 一時停止
                            if (C_ALRET_MODE) m_pause_detect_flg = OperationConst.C_ABNORMAL;
                        }

                        // 走行停止エリア、一時停止エリアに含まれておらず、減速エリアに含まれている場合
                        if (!stop_contain && !pause_contain && slow_contain)
                        {
                            LOGGER.Info($"{C_NM_SAFETYMONITORING}減速エリア侵入→減速");
                            // 目標速度の変更
                            if (C_ALRET_MODE) m_controlCenterData.deceleration_rate =
                                                Viewer.m_SpeedAreas.ElementAt(m_nowidx).Value.SlowCoefficient != null && Viewer.m_SpeedAreas.ElementAt(m_nowidx).Value.SlowCoefficient != ""
                                                ? double.Parse(Viewer.m_SpeedAreas.ElementAt(m_nowidx).Value.SlowCoefficient) : double.Parse(m_ConfigData.SlowCoefficient);

                            // 一時停止中であれば走行再開
                            if (m_pause_detect_flg ==　OperationConst.C_ABNORMAL)
                            {
                                if (C_ALRET_MODE) m_pause_detect_flg = OperationConst.C_NORMAL;
                                LOGGER.Info($"{C_NM_SAFETYMONITORING}Resuming running because the recognized object is out of the area");
                            }
                        }
                    }
                    // どこにも含まれていない場合
                    else
                    {
                        // 減速中であれば通常速度へ戻す
                        if (m_controlCenterData.deceleration_rate != 1.0)
                        {
                            LOGGER.Info($"{C_NM_SAFETYMONITORING}減速エリア侵入解除→減速終了");
                            if (C_ALRET_MODE) m_controlCenterData.deceleration_rate = 1.0;
                        }

                        // 一時停止中であれば走行再開
                        if (m_pause_detect_flg == OperationConst.C_ABNORMAL)
                        {
                            if (C_ALRET_MODE) m_pause_detect_flg = OperationConst.C_NORMAL;
                            LOGGER.Info($"{C_NM_SAFETYMONITORING}Resuming running because the recognized object is out of the area");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Task.Run(() => EmergencyEndProcess(Res.ErrorStatus.DETECT_AREA_ERR.Code));
                ExceptionProcess.ComnExceptionConsoleProcess(ex);
            }
            finally
            {
                //タイマー再開
                if (m_error_flg == OperationConst.C_NORMAL && m_timer_detect != null) m_timer_detect.Change(OperationConst.C_SYSTEM_INTERVAL, OperationConst.C_SYSTEM_INTERVAL);
                AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} End");
            }
        }

        #region ## 判定エリア数計算 ##
        /// <summary>
        /// 後方半径距離から判定エリア数を算出
        /// </summary>
        /// <param name="nowidx">リア軸中心が属するインデックス</param>
        /// <param name="distance">後方判定距離</param>
        /// <returns></returns>
        private int CalcBackIndex(int nowidx, double distance)
        {
            double suml = 0;
            int i = 0;
            // 合計値が距離を超えるか、先頭まで合計したら終了
            for (i = 0; i < nowidx; i++)
            {
                // ノード間の距離の計算
                double l = Math.Sqrt(Math.Pow((m_RouteNodes[nowidx - i].X - m_RouteNodes[nowidx - i - 1].X), 2) + Math.Pow((m_RouteNodes[nowidx - i].Y - m_RouteNodes[nowidx - i - 1].Y), 2));

                suml += l;
                // ノード間の合計値が判定距離を超えたことを確認
                if (suml >= distance)
                {
                    break;
                }
            }
            if (nowidx - i - 1 < 0)
            {
                return nowidx - i;
            }
            else
            {
                return nowidx - i - 1;
            }
        }
        /// <summary>
        /// 前方半径距離から判定エリア数を算出
        /// </summary>
        /// <param name="nowidx">リア軸中心が属するインデックス</param>
        /// <param name="distance">前方判定距離</param>
        /// <returns></returns>
        private int CalcFrontIndex(int nowidx, double distance)
        {
            double suml = 0;
            int i = 0;
            for (i = 0; i < m_SpeedAreas.Count - 2 - nowidx; i++)
            {
                // ノード間の距離の計算
                double l = Math.Sqrt(Math.Pow((m_RouteNodes[nowidx + i + 2].X - m_RouteNodes[nowidx + i + 1].X), 2) + Math.Pow((m_RouteNodes[nowidx + i + 2].Y - m_RouteNodes[nowidx + i + 1].Y), 2));

                suml += l;
                // ノード間の合計値が判定距離を超えたことを確認
                if (suml >= distance)
                {
                    break;
                }
            }
            if (nowidx + i + 1 >= m_SpeedAreas.Count)
            {
                return nowidx + i;
            }
            else
            {
                return nowidx + i + 1;
            }
        }
        #endregion

        #region ## 半径取得 ##
        private double GetRadius(string label,PointF point)
        {

            // 設定されているラベルのエリアを取得
            ObjectLabel labelmst = m_labelList.Single(list => list.Label == label);

            // 人物判定半径の取得
            // エリアに応じて半径変更
            // 属するエリアがあれば係数をかけて半径変更(属するエリアが１つ見つかった時点で終了)
            foreach (LabelArea area in labelmst.LabelAreas)
            {
                if (CommonProc.PointInPolygon(point, area.Area))
                {
                    return labelmst.Radius * area.RadiusCoefficient;
                }
            }

            // 属するエリアがなければそのまま
            return labelmst.Radius;   
        }
        #endregion

        #endregion

        #region ### 車両ローカライズアルゴ比較 ###

        // 車両ローカライズアルゴ比較
        private void Callback_ComparisonPosition(object state)
        {
            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} Start");

            DateTime now = DateTime.Now;

            // 主測位中の測位情報を取得
            //CamInfo maininfo = m_camClMain.CamRcvInfo;
            CamInfo maininfo = GetCamRcvInfo(MainC);
            DateTime maindatetime = new DateTime(now.Year, now.Month, now.Day, int.Parse(maininfo.camStartTime.Substring(0, 2)), int.Parse(maininfo.camStartTime.Substring(2, 2)), int.Parse(maininfo.camStartTime.Substring(4, 2)), int.Parse(maininfo.camStartTime.Substring(6, 3)));

            // 主測位データに一番近い時間の測位データを副測位から抽出
            CamInfo subinfo = new CamInfo();
            TimeSpan span = new TimeSpan();
            List<CamInfo>  subCamHist = GetCamRcvInfoHistory(SubC);
            for (int i = 0; i <= subCamHist.Count(); i++)
            {
                DateTime infodatetime = new DateTime(now.Year, now.Month, now.Day, int.Parse(subCamHist[i].camStartTime.Substring(0, 2)), int.Parse(subCamHist[i].camStartTime.Substring(2, 2)), int.Parse(subCamHist[i].camStartTime.Substring(4, 2)), int.Parse(subCamHist[i].camStartTime.Substring(6, 3)));

                // 前回の差分と比較
                if (i > 0)
                {
                    if (span <= maindatetime - infodatetime)
                    {
                        // 前回より差分が増えたので前回のが一番近いデータとして抽出
                        subinfo = subCamHist[i - 1];
                        break;
                    }
                    else
                    {
                        // 差が小さくなったので次のデータと比較のため次へ
                        // 主と副のデータの時間の差分を取得
                        span = maindatetime - infodatetime;
                    }
                }
                else
                {
                    // 1回目のため、次のデータと比較のため次へ
                    // 主と副のデータの時間の差分を取得
                    span = maindatetime - infodatetime;
                }
            }

            // 偏差の楕円を作成
            ELLIPSE mainellipse = new ELLIPSE();
            mainellipse.fRad_X = m_deviations.Single(val => val.camType == MainCamType).deviationX;
            mainellipse.fRad_Y = m_deviations.Single(val => val.camType == MainCamType).deviationX;
            mainellipse.fCx = maininfo.xPosition;
            mainellipse.fCy = maininfo.yPosition;

            ELLIPSE subellipse = new ELLIPSE();
            subellipse.fRad_X = m_deviations.Single(val => val.camType == SubCamType).deviationX;
            subellipse.fRad_Y = m_deviations.Single(val => val.camType == SubCamType).deviationX;
            subellipse.fCx = subinfo.xPosition;
            subellipse.fCy = subinfo.yPosition;

            // 楕円の衝突判定
            if (!CollisionEllipse(mainellipse,subellipse))
            {
                LOGGER.Info("No positioning point overlap");
                // 衝突しなかった時、異常判定
                if (m_cnt >= C_COMPARISONPOSITION)
                {
                    Task.Run(()=>EmergencyEndProcess(Res.ErrorStatus.COMPARISON_POSITION_ERROR.Code));
                }
                else
                {
                    m_cnt++;
                }
            }

            AppLog.GetInstance().Debug($"{MethodBase.GetCurrentMethod().Name} End");
        }

        #endregion

        // 人検知検査



        #region ### 楕円衝突判定 ###
        /// <summary>
        /// 楕円の衝突判定
        /// http://marupeke296.com/COL_2D_No7_EllipseVsEllipse.html
        /// </summary>
        /// <param name="E1"></param>
        /// <param name="E2"></param>
        /// <returns></returns>
        private bool CollisionEllipse(ELLIPSE E1, ELLIPSE E2)
        {
            // STEP1 : E2を単位円にする変換をE1に施す
            double DefAng = E1.fAngle - E2.fAngle;
            double Cos = Math.Cos(DefAng);
            double Sin = Math.Sin(DefAng);
            double nx = E2.fRad_X * Cos;
            double ny = -E2.fRad_X * Sin;
            double px = E2.fRad_Y * Sin;
            double py = E2.fRad_Y * Cos;
            double ox = Math.Cos(E1.fAngle) * (E2.fCx - E1.fCx) + Math.Sin(E1.fAngle) * (E2.fCy - E1.fCy);
            double oy = -Math.Sin(E1.fAngle) * (E2.fCx - E1.fCx) + Math.Cos(E1.fAngle) * (E2.fCy - E1.fCy);

            // STEP2 : 一般式A～Gの算出
            double rx_pow2 = 1 / (E1.fRad_X * E1.fRad_X);
            double ry_pow2 = 1 / (E1.fRad_Y * E1.fRad_Y);
            double A = rx_pow2 * nx * nx + ry_pow2 * ny * ny;
            double B = rx_pow2 * px * px + ry_pow2 * py * py;
            double D = 2 * rx_pow2 * nx * px + 2 * ry_pow2 * ny * py;
            double E = 2 * rx_pow2 * nx * ox + 2 * ry_pow2 * ny * oy;
            double F = 2 * rx_pow2 * px * ox + 2 * ry_pow2 * py * oy;
            double G = (ox / E1.fRad_X) * (ox / E1.fRad_X) + (oy / E1.fRad_Y) * (oy / E1.fRad_Y) - 1;

            // STEP3 : 平行移動量(h,k)及び回転角度θの算出
            double tmp1 = 1 / (D * D - 4 * A * B);
            double h = (F * D - 2 * E * B) * tmp1;
            double k = (E * D - 2 * A * F) * tmp1;
            double Th = (B - A) == 0 ? 0 : Math.Atan(D / (B - A)) * 0.5f;

            // STEP4 : +1楕円を元に戻した式で当たり判定
            double CosTh = Math.Cos(Th);
            double SinTh = Math.Sin(Th);
            double A_tt = A * CosTh * CosTh + B * SinTh * SinTh - D * CosTh * SinTh;
            double B_tt = A * SinTh * SinTh + B * CosTh * CosTh + D * CosTh * SinTh;
            double KK = A * h * h + B * k * k + D * h * k - E * h - F * k + G;
            if (KK > 0) KK = 0;  // 念のため
            double Rx_tt = 1 + Math.Sqrt(-KK / A_tt);
            double Ry_tt = 1 + Math.Sqrt(-KK / B_tt);
            double x_tt = CosTh * h - SinTh * k;
            double y_tt = SinTh * h + CosTh * k;
            double JudgeValue = x_tt * x_tt / (Rx_tt * Rx_tt) + y_tt * y_tt / (Ry_tt * Ry_tt);

            if (JudgeValue <= 1)
                return true;    // 衝突

            return false;
        }
        #endregion


    }

    // 楕円構造体
    public class ELLIPSE
    {
        public float fRad_X;   // X軸径
        public float fRad_Y;   // Y軸径
        public float fAngle;   // 回転角度
        public float fCx;      // 制御点X座標
        public float fCy;      // 制御点Y座標

        public ELLIPSE()
        {
            fRad_X = 100.0f;
            fRad_Y = 100.0f;
            fAngle = 0.0f;
            fCx = 0.0f;
            fCy = 0.0f;
        }
    };

    // 認識誤差
    public class CamDeviation
    {
        public OperationConst.CamType camType { get; set; }
        public float deviationX { get; set; }
        public float deviationY { get; set; }
    }

    [Serializable]
    // 侵入検知
    public class InstrusionDetection
    {
        /// <summary>
        /// 検知情報
        /// </summary>
        public CommDetect.RecognitionObjectData objectData { get; set; }
        /// <summary>
        /// 検知判定状態 True:判定対象 False:判定対象外
        /// </summary>
        public bool JudgesTarget {get;set;}
        /// <summary>
        /// 認識範囲半径
        /// </summary>
        public double Radius { get; set; }
        /// <summary>
        /// 認識中心座標
        /// </summary>
        public PointF Position { get; set; }


        public InstrusionDetection()
        {
            JudgesTarget = true;
        }

        public object Clone()
        {

            using (MemoryStream ms = new MemoryStream())
            {
                BinaryFormatter bf = new BinaryFormatter();
                bf.Serialize(ms, this);
                ms.Position = 0;
                return (InstrusionDetection)bf.Deserialize(ms);
            }
        }
    }

}
