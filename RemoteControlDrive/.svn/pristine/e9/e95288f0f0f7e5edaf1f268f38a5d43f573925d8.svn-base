using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using RcdCmn;

using RcdDao;

namespace RcdManagement
{
    class clsRcdManagement : IDisposable
    {
        #region ## クラス変数 ##

        // logger
        private AppLog LOGGER = RcdCmn.AppLog.GetInstance();

        // Singleton
        private static clsRcdManagement m_manager = null;
        private static object m_lockobj = new object();

        #endregion

        #region ## インスタンス生成・破棄 ##
        /// <summary>
        /// コンストラクタ
        /// </summary>
        internal static clsRcdManagement GetInstance()
        {
            if (m_manager == null)
            {
                lock (m_lockobj)
                {
                    if (m_manager == null)
                    {
                        m_manager = new clsRcdManagement();
                    }
                }

            }
            return m_manager;
        }

        private clsRcdManagement()
        {
            LOGGER.Debug($"{MethodBase.GetCurrentMethod().Name} Start");
            try
            {
                // show version
                Version version = Assembly.GetExecutingAssembly().GetName().Version;
                LOGGER.Info($"{Res.C_SYSTEM} {Res.C_MNG_SRV} Ver.{version.ToString()}");
                LOGGER.Info($"Initializing App Start...");

                // 上位DBとの同期(担当工場分のデータコピー)

                // DBデータ取得(マスタデータ取得)

                // OperationPCと通信

                // IP管理

            }
            catch (UserException ue) { ExceptionProcess.UserExceptionConsoleProcess(ue); }
            catch (Exception ex) { ExceptionProcess.ComnExceptionConsoleProcess(ex); }
            finally { LOGGER.Debug($"{MethodBase.GetCurrentMethod().Name} End"); }
        }

        #region IDisposable Support
        private bool disposedValue = false;
        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {

                }
                disposedValue = true;
            }
        }

        public void Dispose()
        {
            Dispose(true);
        }
        #endregion

        #endregion
    }
}
